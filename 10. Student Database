v/*10. Student Database

 Implement a Student class with attributes such as ID, name, age, gender, grade, and contact information using ArrayList .Create a menu-driven program with an administrator login feature that allows authorized users to:

A. Add a new student to the database.
B. Remove a student from the database by their ID.
C. Update student information (name, age, grade, etc.).
D. Display all students in the database.
E. Search for a student by their ID, name, grade, or any other criteria.
F. Implement error handling and validation for user inputs, such as invalid IDs, duplicate entries, etc.
*/

import java.util.ArrayList;
import java.util.Scanner;

class Student {
    private int id;
    private String name;
    private int age;
    private String gender;
    private String grade;
    private String contactInfo;

    public Student(int id, String name, int age, String gender, String grade, String contactInfo) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.grade = grade;
        this.contactInfo = contactInfo;
    }

    public int getId() {
        return id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public void setContactInfo(String contactInfo) {
        this.contactInfo = contactInfo;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Age: " + age + ", Gender: " + gender + ", Grade: " + grade + ", Contact Info: " + contactInfo;
    }
}

public class StudentDatabase {
    private static ArrayList<Student> students = new ArrayList<>();
    private static Scanner scanner = new Scanner(System.in);
    private static final String adminUsername = "admin";
    private static final String adminPassword = "password";

    public static void main(String[] args) {
        if (adminLogin()) {
            while (true) {
                displayMenu();
                int choice = Integer.parseInt(scanner.nextLine());
                switch (choice) {
                    case 1:
                        addStudent();
                        break;
                    case 2:
                        removeStudent();
                        break;
                    case 3:
                        updateStudent();
                        break;
                    case 4:
                        displayAllStudents();
                        break;
                    case 5:
                        searchStudent();
                        break;
                    case 6:
                        System.out.println("Exiting the program.");
                        return;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        } else {
            System.out.println("Invalid login credentials. Exiting the program.");
        }
    }

    private static boolean adminLogin() {
        System.out.print("Enter admin username: ");
        String username = scanner.nextLine();
        System.out.print("Enter admin password: ");
        String password = scanner.nextLine();
        return username.equals(adminUsername) && password.equals(adminPassword);
    }

    private static void displayMenu() {
        System.out.println("\n--- Student Database Menu ---");
        System.out.println("1. Add a new student");
        System.out.println("2. Remove a student");
        System.out.println("3. Update student information");
        System.out.println("4. Display all students");
        System.out.println("5. Search for a student");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    private static void addStudent() {
        System.out.print("Enter ID: ");
        int id = Integer.parseInt(scanner.nextLine());
        if (findStudentById(id) != null) {
            System.out.println("Error: A student with this ID already exists.");
            return;
        }

        System.out.print("Enter name: ");
        String name = scanner.nextLine();
        System.out.print("Enter age: ");
        int age = Integer.parseInt(scanner.nextLine());
        System.out.print("Enter gender: ");
        String gender = scanner.nextLine();
        System.out.print("Enter grade: ");
        String grade = scanner.nextLine();
        System.out.print("Enter contact information: ");
        String contactInfo = scanner.nextLine();

        students.add(new Student(id, name, age, gender, grade, contactInfo));
        System.out.println("Student added successfully.");
    }

    private static void removeStudent() {
        System.out.print("Enter ID of the student to remove: ");
        int id = Integer.parseInt(scanner.nextLine());
        Student student = findStudentById(id);
        if (student != null) {
            students.remove(student);
            System.out.println("Student removed successfully.");
        } else {
            System.out.println("Error: No student found with the given ID.");
        }
    }

    private static void updateStudent() {
        System.out.print("Enter ID of the student to update: ");
        int id = Integer.parseInt(scanner.nextLine());
        Student student = findStudentById(id);
        if (student != null) {
            System.out.print("Enter new name: ");
            student.setName(scanner.nextLine());
            System.out.print("Enter new age: ");
            student.setAge(Integer.parseInt(scanner.nextLine()));
            System.out.print("Enter new gender: ");
            student.setGender(scanner.nextLine());
            System.out.print("Enter new grade: ");
            student.setGrade(scanner.nextLine());
            System.out.print("Enter new contact information: ");
            student.setContactInfo(scanner.nextLine());
            System.out.println("Student information updated successfully.");
        } else {
            System.out.println("Error: No student found with the given ID.");
        }
    }

    private static void displayAllStudents() {
        if (students.isEmpty()) {
            System.out.println("No students found.");
        } else {
            for (Student student : students) {
                System.out.println(student);
            }
        }
    }

    private static void searchStudent() {
        System.out.print("Enter search criteria (ID/Name/Grade): ");
        String criteria = scanner.nextLine().toLowerCase();
        boolean found = false;

        for (Student student : students) {
            if (String.valueOf(student.getId()).equals(criteria) ||
                    student.toString().toLowerCase().contains(criteria)) {
                System.out.println(student);
                found = true;
            }
        }

        if (!found) {
            System.out.println("No students found matching the criteria.");
        }
    }

    private static Student findStudentById(int id) {
        for (Student student : students) {
            if (student.getId() == id) {
                return student;
            }
        }
        return null;
    }
}
